package config

import (
	"github.com/cygy/ginamite/common/config/environment"
	"github.com/cygy/ginamite/common/config/version"
	"github.com/cygy/ginamite/worker/tasks/recurring"
)

// GZipConfiguration : configuration of the GZip.
type GZipConfiguration struct {
	Enabled bool
	Level   int
}

// SSLConfiguration : configuration of the SSL.
type SSLConfiguration struct {
	Enabled  bool
	CertPath string `yaml:"cert_path"`
	KeyPath  string `yaml:"key_path"`
}

// ServerConfiguration : configuration of the server.
type ServerConfiguration struct {
	Host      string
	Port      int
	GZip      GZipConfiguration `yaml:"gzip"`
	SSL       SSLConfiguration  `yaml:"ssl"`
	LogFormat string            `yaml:"log_format"`
}

// APIConfiguration : configuration of an API called by the server.
type APIConfiguration struct {
	Host       string
	Port       int
	Version    string
	TimeOut    int `yaml:"time_out"` // in milliseconds
	RetryCount int `yaml:"retry_count"`
}

// HostConfiguration : configuration of the hosts.
type HostConfiguration struct {
	API    string `yaml:"api"`
	Web    string
	Static string
}

// LocaleConfiguration : configuration of the locale.
type LocaleConfiguration struct {
	DateFormat     string `yaml:"date_format"`
	TimeFormat     string `yaml:"time_format"`
	DateTimeFormat string `yaml:"date_time_format"`
	Default        bool   `yaml:"default"`
}

// DatabaseConfiguration : configuration of the mongo database.
type DatabaseConfiguration struct {
	Service  string
	Host     string
	Port     int
	Database string
	Username string
	Password string
	TimeOut  int64 `yaml:"time_out"`
}

// CookieConfiguration : configuration of the cookie.
type CookieConfiguration struct {
	Name     string
	Domain   string
	Path     string
	TTL      int `yaml:"ttl"`
	Secure   bool
	HTTPOnly bool `yaml:"http_only"`
}

// JWTConfiguration : configuration of the JWT tokens.
type JWTConfiguration struct {
	Secret        string
	SigningMethod string `yaml:"signing_method"`
	TTL           int64  `yaml:"ttl"`
}

// SMTPConfiguration : configuration of the smtp server.
type SMTPConfiguration struct {
	Host     string
	Port     int
	Username string
	Password string
}

// ServiceConfiguration : configuration of a hosted service.
type ServiceConfiguration struct {
	Host string
	Port int
}

// FacebookConfiguration : configuration of the Facebook developer application.
type FacebookConfiguration struct {
	Enabled    bool
	AppID      string `yaml:"app_id"`
	APIVersion string `yaml:"api_version"`
	TimeOut    int    `yaml:"time_out"` // in milliseconds
	RetryCount int    `yaml:"retry_count"`
}

// GoogleConfiguration : configuration of the Google developer application.
type GoogleConfiguration struct {
	Enabled    bool
	ClientID   string `yaml:"client_id"`
	APIVersion string `yaml:"api_version"`
	TimeOut    int    `yaml:"time_out"` // in milliseconds
	RetryCount int    `yaml:"retry_count"`
}

// SocialMediaConfiguration : the urls to the different social network pages.
type SocialMediaConfiguration struct {
	Facebook string
	Google   string
	Twitter  string
}

// IPStackConfiguration : configuration of the API ipstack.com.
type IPStackConfiguration struct {
	Host string
	Key  string
}

// ExpiredAuthTokensConfiguration : management of the expired auth tokens.
type ExpiredAuthTokensConfiguration struct {
	FlushCacheInterval int `yaml:"flush_cache_interval"`
}

// TermsConfiguration : configuration of the terms of use of the application.
type TermsConfiguration struct {
	Path    string `yaml:"path"`
	Version string `yaml:"version"`
}

// UserNotificationsConfiguration : configuration of the notifications received by a user.
type UserNotificationsConfiguration struct {
	Limit int `yaml:"limit"`
}

// AccountConfiguration : configuration of the users' account.
type AccountConfiguration struct {
	EmailAddressMustBeConfirmed bool `yaml:"email_address_must_be_confirmed"`
	DeleteNeverUsedAfter        uint `yaml:"delete_never_used_after"` // in days
	DeleteInactiveAfter         uint `yaml:"delete_inactive_after"`   // in months
}

// SitemapConfiguration : management of the sitemap files generation.
type SitemapConfiguration struct {
	Path               string `yaml:"path"`
	Name               string `yaml:"name"`
	MaximumURLsPerPage int    `yaml:"max_urls_per_page"`
}

// Configuration : root configuration object.
type Configuration struct {
	Environment         string
	Version             string
	SupportedLocales    []string                       // Generated by the constructor
	FallbackLocales     map[string]string              // Indexes are languages (i.e. "fr", "en", etc), the values are the locale bound to this default language (i.e. "fr-fr", "en-gb", etc). Generated by the constructor
	Locales             map[string]LocaleConfiguration `yaml:"locales"`
	DefaultLocale       string                         `yaml:"default_locale"`
	DefaultTimezone     string                         `yaml:"default_timezone"`
	LocalizationPath    string                         `yaml:"localization_path"`
	TemplatesPath       string                         `yaml:"templates_path"`
	RobotsFilePath      string                         `yaml:"robots_file_path"`
	TimezonesFilePath   string                         `yaml:"timezones_file_path"`
	APIVersion          string                         `yaml:"api_version"`
	KafkaTopicsPrefix   string                         `yaml:"kafka_topics_prefix"`
	SenderName          string                         `yaml:"sender_name"`
	SenderEmailAddress  string                         `yaml:"sender_email_address"`
	NoReplyEmailAddress string                         `yaml:"noreply_email_address"`
	Server              ServerConfiguration
	Hosts               HostConfiguration
	Database            DatabaseConfiguration
	Cookie              CookieConfiguration
	JWT                 JWTConfiguration  `yaml:"jwt"`
	SMTP                SMTPConfiguration `yaml:"smtp"`
	API                 APIConfiguration  `yaml:"api"`
	Services            map[string]ServiceConfiguration
	Facebook            FacebookConfiguration
	Google              GoogleConfiguration
	SocialNetworks      SocialMediaConfiguration       `yaml:"social_networks"`
	IPStack             IPStackConfiguration           `yaml:"ipstack"`
	ExpiredAuthTokens   ExpiredAuthTokensConfiguration `yaml:"expired_auth_tokens"`
	Sitemap             SitemapConfiguration
	Terms               TermsConfiguration
	UserNotifications   UserNotificationsConfiguration `yaml:"user_notifications"`
	Account             AccountConfiguration
	RecurringTasks      []recurring.ScheduledTask `yaml:"recurring_tasks"` // tasks executed by the workers
	RunStartUpTasks     bool                      `yaml:"run_start_up_tasks"`
}

// NewConfiguration : initialize a new Configuration struct.
func NewConfiguration() (config *Configuration) {
	config = new(Configuration)
	config.Environment = environment.Development
	config.Version = version.Beta
	config.Server.Host = "localhost"
	config.Server.Port = 80
	config.Server.GZip.Enabled = false
	config.Server.SSL.Enabled = false
	config.DefaultLocale = "en-us"
	config.Locales = map[string]LocaleConfiguration{}
	config.SupportedLocales = []string{}
	config.FallbackLocales = map[string]string{}
	config.Database.TimeOut = 60
	config.Cookie.Secure = true
	config.Cookie.HTTPOnly = true
	config.JWT.SigningMethod = "HS256"
	config.JWT.TTL = 3600
	config.API.TimeOut = 2000
	config.Facebook.Enabled = false
	config.Google.Enabled = false
	config.ExpiredAuthTokens.FlushCacheInterval = 60
	config.Sitemap.Name = "sitemap"
	config.Sitemap.MaximumURLsPerPage = 50000
	config.Terms.Version = "0"
	config.UserNotifications.Limit = 20
	config.Account.EmailAddressMustBeConfirmed = true
	config.Account.DeleteNeverUsedAfter = 10
	config.Account.DeleteInactiveAfter = 48
	config.RecurringTasks = []recurring.ScheduledTask{}
	config.RunStartUpTasks = false

	return
}
